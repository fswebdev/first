{"version":3,"sources":["../../taskgit/src/List/index.js","../../taskgit/src/serviceWorker.js","../../taskgit/src/index.js"],"names":["makeLookup","arr","prop","lkup","i","l","length","DEFAULT_CLASS_NAMES","button","buttonActive","filter","select","FilteredMultiSelect","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_selectRef","_select","_onFilterChange","e","target","value","setState","filteredOptions","_filterOptions","_updateSelectedValues","_onFilterKeyPress","key","preventDefault","state","selectedOption","selectedOptions","concat","selectedValues","onChange","el","options","selected","push","String","_addSelectedToSelection","values","items","found","valuesLookup","la","lv","getItemsByProp","valueProp","defaultFilter","nextProps","name","classNames","_len","arguments","modifiers","Array","_key","join","toUpperCase","_this$props","textProp","selectedValueLookup","indexOf","_this$state","_this$props2","className","disabled","placeholder","showFilter","size","hasSelectedOptions","react_default","a","createElement","type","_getClassName","onKeyPress","multiple","ref","onDoubleClick","map","option","onClick","buttonText","React","Component","defaultProps","Boolean","window","location","hostname","Fragment","colors","fruits","reduce","toConsumableArray","acc","fruit","color","BOOTSTRAP_CLASSES","List","handleClearSelection","handleSelectionChange","sort","b","index","slice","splice","_this2","src_List","item","style","cursor","handleDeselect","marginLeft","AddRemoveSelection","deselectedOptions","_this3","forEach","handleSelect","App","src_List_1","src_AddRemoveSelection","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e86a4af.chunk.js","sourcesContent":["import t from 'prop-types'\nimport React from 'react'\n\nfunction makeLookup(arr, prop) {\n  let lkup = {}\n  for (let i = 0, l = arr.length; i < l; i++) {\n    if (prop) {\n      lkup[arr[i][prop]] = true\n    }\n    else {\n      lkup[arr[i]] = true\n    }\n  }\n  return lkup\n}\n\nfunction getItemsByProp(arr, prop, values) {\n  let items = []\n  let found = 0\n  let valuesLookup = makeLookup(values)\n  for (let i = 0, la = arr.length, lv = values.length;\n       i < la && found < lv;\n       i++) {\n    if (valuesLookup[arr[i][prop]]) {\n      items.push(arr[i])\n      found++\n    }\n  }\n  return items\n}\n\nconst DEFAULT_CLASS_NAMES = {\n  button: 'FilteredMultiSelect__button',\n  buttonActive: 'FilteredMultiSelect__button--active',\n  filter: 'FilteredMultiSelect__filter',\n  select: 'FilteredMultiSelect__select'\n}\n\nclass FilteredMultiSelect extends React.Component {\n  static propTypes = {\n    onChange: t.func.isRequired,\n    options: t.array.isRequired,\n\n    buttonText: t.string,\n    className: t.string,\n    classNames: t.object,\n    defaultFilter: t.string,\n    disabled: t.bool,\n    placeholder: t.string,\n    selectedOptions: t.array,\n    showFilter: t.bool,\n    size: t.number,\n    textProp: t.string,\n    valueProp: t.string,\n  }\n\n  static defaultProps = {\n    buttonText: 'Select',\n    className: 'FilteredMultiSelect',\n    classNames: {},\n    defaultFilter: '',\n    disabled: false,\n    placeholder: 'type to filter',\n    selectedOptions: [],\n    showFilter: true,\n    size: 6,\n    textProp: 'text',\n    valueProp: 'value',\n  }\n\n  constructor(props) {\n    super(props)\n\n    let {defaultFilter, selectedOptions} = props\n    this.state = {\n      // Filter text\n      filter: defaultFilter,\n      // Options which haven't been selected and match the filter text\n      filteredOptions: this._filterOptions(defaultFilter, selectedOptions),\n      // Values of <options> currently selected in the <select>\n      selectedValues: []\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // Update visible options in response to options or selectedOptions\n    // changing. Also update selected values after the re-render completes, as\n    // one of the previously selected options may have been removed.\n    if (nextProps.options !== this.props.options ||\n        nextProps.selectedOptions !== this.props.selectedOptions ||\n        nextProps.options.length !== this.props.options.length ||\n        nextProps.selectedOptions.length !== this.props.selectedOptions.length) {\n      this.setState({\n        filteredOptions: this._filterOptions(this.state.filter,\n                                             nextProps.selectedOptions,\n                                             nextProps.options)\n      }, this._updateSelectedValues)\n    }\n  }\n\n  _getClassName(name, ...modifiers) {\n    let classNames = [this.props.classNames[name] || DEFAULT_CLASS_NAMES[name]]\n    for (let i = 0, l = modifiers.length; i < l; i++) {\n      if (modifiers[i]) {\n        classNames.push(this.props.classNames[modifiers[i]] || DEFAULT_CLASS_NAMES[modifiers[i]])\n      }\n    }\n    return classNames.join(' ')\n  }\n\n  _filterOptions(filter, selectedOptions, options) {\n    if (typeof filter == 'undefined') {\n      filter = this.state.filter\n    }\n    if (typeof selectedOptions == 'undefined') {\n      selectedOptions = this.props.selectedOptions\n    }\n    if (typeof options == 'undefined') {\n      options = this.props.options\n    }\n    filter = filter.toUpperCase()\n\n    let {textProp, valueProp} = this.props\n    let selectedValueLookup = makeLookup(selectedOptions, valueProp)\n    let filteredOptions = []\n\n    for (let i = 0, l = options.length; i < l; i++) {\n      if (!selectedValueLookup[options[i][valueProp]] &&\n          (!filter || options[i][textProp].toUpperCase().indexOf(filter) !== -1)) {\n        filteredOptions.push(options[i])\n      }\n    }\n\n    return filteredOptions\n  }\n\n  _selectRef = (select) => {\n    this._select = select\n  }\n\n  _onFilterChange = (e) => {\n    let filter = e.target.value\n    this.setState({\n      filter,\n      filteredOptions: this._filterOptions(filter)\n    }, this._updateSelectedValues)\n  }\n\n  _onFilterKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault()\n      if (this.state.filteredOptions.length === 1) {\n        let selectedOption = this.state.filteredOptions[0]\n        let selectedOptions = this.props.selectedOptions.concat([selectedOption])\n        this.setState({filter: '', selectedValues: []}, () => {\n          this.props.onChange(selectedOptions)\n        })\n      }\n    }\n  }\n\n  _updateSelectedValues = (e) => {\n    let el = e ? e.target : this._select\n    let selectedValues = []\n    for (let i = 0, l = el.options.length; i < l; i++) {\n      if (el.options[i].selected) {\n        selectedValues.push(el.options[i].value)\n      }\n    }\n    // Always update if we were handling an event, otherwise only update if\n    // selectedValues has actually changed.\n    if (e || String(this.state.selectedValues) !== String(selectedValues)) {\n      this.setState({selectedValues})\n    }\n  }\n\n  /**\n   * Adds backing objects for the currently selected options to the selection\n   * and calls back with the new list.\n   */\n  _addSelectedToSelection = (e) => {\n    let selectedOptions =\n      this.props.selectedOptions.concat(getItemsByProp(this.state.filteredOptions,\n                                                       this.props.valueProp,\n                                                       this.state.selectedValues))\n    this.setState({selectedValues: []}, () => {\n      this.props.onChange(selectedOptions)\n    })\n  }\n\n  render() {\n    let {filter, filteredOptions, selectedValues} = this.state\n    let {className, disabled, placeholder, showFilter, size, textProp, valueProp} = this.props\n    let hasSelectedOptions = selectedValues.length > 0\n    return <div className={className}>\n      {showFilter && <input\n        type=\"text\"\n        className={this._getClassName('filter')}\n        placeholder={placeholder}\n        value={filter}\n        onChange={this._onFilterChange}\n        onKeyPress={this._onFilterKeyPress}\n        disabled={disabled}\n      />}\n      <select multiple\n        ref={this._selectRef}\n        className={this._getClassName('select')}\n        size={size}\n        value={selectedValues}\n        onChange={this._updateSelectedValues}\n        onDoubleClick={this._addSelectedToSelection}\n        disabled={disabled}>\n        {filteredOptions.map((option) => {\n          return <option key={option[valueProp]} value={option[valueProp]}>{option[textProp]}</option>\n        })}\n      </select>\n      <button type=\"button\"\n        className={this._getClassName('button', hasSelectedOptions && 'buttonActive')}\n        disabled={!hasSelectedOptions}\n        onClick={this._addSelectedToSelection}>\n        {this.props.buttonText}\n      </button>\n    </div>\n  }\n}\n\nexport default FilteredMultiSelect\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'http://pradeepkrishnarao.000webhostapp.com/task/' // ||\n    // [::1] is the IPv6 localhost address.\n  //  window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n  //  window.location.hostname.match(\n  //    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  //  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport FilteredMultiSelect from './List/index'\nimport './List/index.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst { Fragment } = React;\n\n// ---------------------------------------\n// Do NOT change anything below this line.\n// ---------------------------------------\nconst sizes = ['tiny', 'small', 'medium', 'large', 'huge'];\nconst colors = ['navy', 'blue', 'aqua', 'teal', 'olive', 'green', 'lime', 'yellow', 'orange', 'red', 'maroon', 'fuchsia', 'purple', 'silver', 'gray', 'black'];\nconst fruits = ['apple', 'banana', 'watermelon', 'orange', 'peach', 'tangerine', 'pear', 'kiwi', 'mango', 'pineapple'];\n\nconst items = sizes.reduce(\n  (items, size) => [\n    ...items,\n    ...fruits.reduce(\n      (acc, fruit) => [\n        ...acc,\n        ...colors.reduce(\n          (acc, color) => [\n            ...acc,\n            {\n              name: `${size} ${color} ${fruit}`,\n              color,\n            },\n          ],\n          [],\n        ),\n      ],\n      [],\n    ),\n  ],\n  [],\n);\n// ------------------------------------------------------------\n// End of above variable definition and initialization snippet.\n// ------------------------------------------------------------\nconst BOOTSTRAP_CLASSES = {\n  filter: 'form-control',\n  select: 'form-control',\n  button: 'btn btn btn-block btn-default',\n  buttonActive: 'btn btn btn-block btn-primary',\n}\n\nclass List extends React.Component {\n  state = {\n    selectedOptions: []\n  }\n\n  handleDeselect(index) {\n    var selectedOptions = this.state.selectedOptions.slice()\n    selectedOptions.splice(index, 1)\n    this.setState({selectedOptions})\n  }\n\n  handleClearSelection = (e) => {\n    this.setState({selectedOptions: []})\n  }\n  handleSelectionChange = (selectedOptions) => {\n    selectedOptions.sort((a, b) => a.name - b.name)\n    this.setState({selectedOptions})\n  }\n\n  render() {\n    var {selectedOptions} = this.state\n    return(<div className=\"row\">\n      <div>\n        <FilteredMultiSelect\n          classNames={BOOTSTRAP_CLASSES}\n          onChange={this.handleSelectionChange}\n\t\t  options={items}\n          selectedOptions={selectedOptions}\n\t\t  textProp=\"name\"\n\t\t  valueProp=\"name\"\n\t\t  \n        />\n      </div>\n      <div>\n\t  <Fragment>\n\t  {selectedOptions.length === 0 && <p>(nothing selected yet)</p>}\n        {selectedOptions.length > 0 && <ul className=\"List\">          \n\t\t   {selectedOptions.map((item, i) => <li key={item.name} className={`List__item List__item--${item.color}`}>\n\t\t\t   {item.name}\n            <span style={{cursor: 'pointer'}} onClick={() => this.handleDeselect(i)}>\n              &times;\n            </span>\n          </li>)}\n        </ul>}\n\t\t</Fragment>\n        {selectedOptions.length > 0 && <button style={{marginLeft: 20}} className=\"btn btn-default\" onClick={this.handleClearSelection}>\n          Clear Selection\n        </button>}\n      </div>\n    </div>\n\t);\n  }\n}\nclass AddRemoveSelection extends React.Component {\n  state = {\n    selectedOptions: []\n  }\n  handleDeselect = (deselectedOptions) => {\n    var selectedOptions = this.state.selectedOptions.slice()\n    deselectedOptions.forEach(option => {\n      selectedOptions.splice(selectedOptions.indexOf(option), 1)\n    })\n    this.setState({selectedOptions})\n  }\n  handleSelect = (selectedOptions) => {\n    selectedOptions.sort((a, b) => a.name - b.name)\n    this.setState({selectedOptions})\n  }\n  render() {\n    var {selectedOptions} = this.state\n    return <div className=\"row\">\n      <div className=\"col-md-5\">\n        <FilteredMultiSelect\n          buttonText=\"Add\"\n          classNames={BOOTSTRAP_CLASSES}\n          onChange={this.handleSelect}\n\t\t  options={items}\n          selectedOptions={selectedOptions}\n\t\t   textProp=\"name\"\n\t\t   valueProp=\"name\"\n\t\t  />\n      </div>\n      <div className=\"col-md-5\">\n        <FilteredMultiSelect\n          buttonText=\"Remove\"\n          classNames={{\n            filter: 'form-control',\n            select: 'form-control',\n            button: 'btn btn btn-block btn-default',\n            buttonActive: 'btn btn btn-block btn-danger'\n          }}\n          onChange={this.handleDeselect}\n          options={selectedOptions}\n\t\t  textProp=\"name\"\n\t\t  valueProp=\"name\"\n        />\n      </div>\n    </div>\n  }\n}\n\nclass App extends React.Component {\n  render() {\n    return( <div className=\"container mb-5\">\n\t  <br/>\n\t  <br/>\n      <h4>List</h4>\n      <List/>\n\t  <br/>\n\t  <br/>\n      <h4>Add &amp; Remove</h4>\n      <AddRemoveSelection/>\n    </div>\n\t);\n  }\n}\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}